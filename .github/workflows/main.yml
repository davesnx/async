name: Main workflow

on: [push]

env:
  CACHE_IMAGE: davesnx/async_app
  DOCKER_BUILDKIT: 1

jobs:
  build-docker:
    name: Build Docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker cache layers
        uses: actions/cache@v2
        with:
          path: /.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASS }}

      - name: Build and push $CACHE_IMAGE:base
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: $CACHE_IMAGE:base
          cache-from: type=local,src=/.buildx-cache
          cache-to: type=local,dest=/.buildx-cache

      - name: Build and push $CACHE_IMAGE:client
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: $CACHE_IMAGE:client
          cache-from: type=local,src=/.buildx-cache
          cache-to: type=local,dest=/.buildx-cache

      - name: Build stage
        uses: docker/build-push-action@v2
        with:
          push: false
          tags: $CACHE_IMAGE:stage
          cache-from: type=local,src=/.buildx-cache
          cache-to: type=local,dest=/.buildx-cache

      - name: Push stage image to docker hub
        run: |
          SHORT_GITHUB_SHA=$(echo $GITHUB_SHA | cut -c1-8)
          docker tag $CACHE_IMAGE:stage $CACHE_IMAGE:stage-$SHORT_GITHUB_SHA
          docker push $CACHE_IMAGE:stage-$SHORT_GITHUB_SHA

  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
        ocaml-version:
          - 4.10.0

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Retrieve opam cache
        uses: actions/cache@v2
        if: runner.os != 'Windows'
        id: cache-opam
        with:
          path: ~/.opam
          key: v1-${{ runner.os }}-opam-${{ matrix.ocaml-version }}-${{ hashFiles('*.opam.locked') }}
          restore-keys: |
            v1-${{ runner.os }}-opam-${{ matrix.ocaml-version }}-

      - name: Use latest LTS Node.js release
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: Use OCaml ${{ matrix.ocaml-version }}
        uses: avsm/setup-ocaml@v1
        with:
          ocaml-version: ${{ matrix.ocaml-version }}

      - name: Print OCaml version
        run: opam exec -- ocaml --version

      - name: Install Opam dependencies
        if: steps.cache-opam.outputs.cache-hit != 'true'
        run: opam exec -- make install

      - name: Fix broken opam state
        if: steps.cache-opam.outputs.cache-hit == 'true'
        run: opam upgrade --fixup

      - name: Build
        run: opam exec -- make build