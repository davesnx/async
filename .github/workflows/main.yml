name: Main workflow

on: [push]

env:
  CACHE_IMAGE: davesnx/async_app
  DOCKER_BUILDKIT: 1

jobs:
  build-docker:
    name: Build Docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v1

      - uses: whoan/docker-build-with-cache-action@master
        with:
          username: "${{ secrets.REGISTRY_USER }}"
          password: "${{ secrets.REGISTRY_PASS }}"
          image_name: "${{ env.CACHE_IMAGE }}"
          image_tag: base,client,stage

      - name: Log in to docker hub
        run: docker login -u ${{ secrets.REGISTRY_USER }} -p ${{ secrets.REGISTRY_PASS }}

      - name: Push base image to docker hub
        run: docker push $CACHE_IMAGE:base
      - name: Push client image to docker hub
        run: docker push $CACHE_IMAGE:client
      - name: Push stage image to docker hub
        run: docker push $CACHE_IMAGE:stage

  build-and-test:
    name: Build and Test

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest

        ocaml-version:
          - 4.10.0

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Retrieve opam cache
        uses: actions/cache@v2
        if: runner.os != 'Windows'
        id: cache-opam
        with:
          path: ~/.opam
          key: v1-${{ runner.os }}-opam-${{ matrix.ocaml-version }}-${{ hashFiles('*.opam.locked') }}
          restore-keys: |
            v1-${{ runner.os }}-opam-${{ matrix.ocaml-version }}-

      - name: Use latest LTS Node.js release
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: Use OCaml ${{ matrix.ocaml-version }}
        uses: avsm/setup-ocaml@v1
        with:
          ocaml-version: ${{ matrix.ocaml-version }}

      - name: Print OCaml version
        run: opam exec -- ocaml --version

      - name: Install Opam dependencies
        if: steps.cache-opam.outputs.cache-hit != 'true'
        run: opam exec -- make install

      - name: Fix broken opam state
        if: steps.cache-opam.outputs.cache-hit == 'true'
        run: opam upgrade --fixup

      - name: Build
        run: opam exec -- make build